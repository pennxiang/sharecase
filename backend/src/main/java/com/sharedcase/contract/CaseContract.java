package com;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple5;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.eventsub.EventSubCallback;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class CaseContract extends Contract {
    public static final String[] BINARY_ARRAY = {"","821115610feb57600080fd5b610ff788838901610f30565b9550602087013591508082111561100d57600080fd5b61101988838901610f30565b9450604087013591508082111561102f57600080fd5b5061103c87828801610f30565b92505061104b60608601610e2b565b905092959194509250565b6000806040838503121561106957600080fd5b61107283610e2b565b946020939093013593505050565b60a08152600061109360a0830188610e62565b82810360208401526110a58188610e62565b905082810360408401526110b98187610e62565b6001600160a01b039590951660608401525050608001529392505050565b60c0815260006110ea60c0830189610eaf565b6020838203818501526110fd828a610eaf565b915083820360408501526111118289610eaf565b915083820360608501526111258288610dcd565b915083820360808501526111398287610dcd565b84810360a0860152855180825282870193509082019060005b8181101561116e57845183529383019391830191600101611152565b50909b9a5050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156111be576111be611195565b500190565b60006000198214156111d7576111d7611195565b5060010190565b600181811c908216806111f257607f821691505b6020821081141561121357634e487b7160e01b600052602260045260246000fd5b50919050565b60808152600061122c6080830187610e62565b828103602084015261123e8187610e62565b905082810360408401526112528186610e62565b9150508260608301529594505050505056fea2646970667358221220f9d97a982c5a16b4bbe1a7a10683d69160a18d02783a1efb505e59e17d7ba76364736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","565b6001600160a01b039590951660608401525050608001529392505050565b60006020828403121561101157600080fd5b61101a82610f62565b9392505050565b60208152600061101a6020830184610e76565b63b95aa35560e01b600052604160045260246000fd5b600082601f83011261105b57600080fd5b813567ffffffffffffffff8082111561107657611076611034565b604051601f8301601f19908116603f0116810190828211818310171561109e5761109e611034565b816040528381528660208588010111156110b757600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156110ed57600080fd5b843567ffffffffffffffff8082111561110557600080fd5b6111118883890161104a565b9550602087013591508082111561112757600080fd5b6111338883890161104a565b9450604087013591508082111561114957600080fd5b506111568782880161104a565b92505061116560608601610f62565b905092959194509250565b60208152600061101a6020830184610e1e565b63b95aa35560e01b600052603260045260246000fd5b600181811c908216806111ad57607f821691505b602082108114156111ce5763b95aa35560e01b600052602260045260246000fd5b50919050565b63b95aa35560e01b600052601160045260246000fd5b60006000198214156111fe576111fe6111d4565b5060010190565b6080815260006112186080830187610dd1565b828103602084015261122a8187610dd1565b9050828103604084015261123e8186610dd1565b91505082606083015295945050505050565b60008219821115611263576112636111d4565b50019056fea2646970667358221220faba6f177fa5da14ce0ff43acc3540806334b3e7a4dd1eef6539ea1a0e81726264736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"caseId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"icdCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"visitTime\",\"type\":\"uint256\"}],\"name\":\"CaseAdded\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[1]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"caseId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"icdCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"addCase\",\"outputs\":[],\"selector\":[2761880646,2696712254],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[1]}],\"inputs\":[],\"name\":\"getAllCaseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"selector\":[237840446,3398136443],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[1]}],\"inputs\":[],\"name\":\"getAllCases\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"caseIds\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"icdCodes\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"ipfsHashes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"patients\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"doctors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"visitTimes\",\"type\":\"uint256[]\"}],\"selector\":[4215325226,77362248],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":4,\"value\":[1]}],\"inputs\":[],\"name\":\"getAllPatients\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"selector\":[413282729,1987439864],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":0,\"value\":[0]},{\"kind\":3,\"slot\":0,\"value\":[1]}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"caseId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"icdCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"doctor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"visitTime\",\"type\":\"uint256\"}],\"selector\":[3262622453,907206526],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"getCaseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[3259095977,1193373605],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0}],\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"}],\"name\":\"getIpfsHashes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"selector\":[442335038,3847823405],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDCASE = "addCase";

    public static final String FUNC_GETALLCASECOUNT = "getAllCaseCount";

    public static final String FUNC_GETALLCASES = "getAllCases";

    public static final String FUNC_GETALLPATIENTS = "getAllPatients";

    public static final String FUNC_GETCASE = "getCase";

    public static final String FUNC_GETCASECOUNT = "getCaseCount";

    public static final String FUNC_GETIPFSHASHES = "getIpfsHashes";

    public static final Event CASEADDED_EVENT = new Event("CaseAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    protected CaseContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<CaseAddedEventResponse> getCaseAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CASEADDED_EVENT, transactionReceipt);
        ArrayList<CaseAddedEventResponse> responses = new ArrayList<CaseAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CaseAddedEventResponse typedResponse = new CaseAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.patient = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.doctor = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.caseId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.icdCode = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.ipfsHash = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.visitTime = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCaseAddedEvent(BigInteger fromBlock, BigInteger toBlock,
            List<String> otherTopics, EventSubCallback callback) {
        String topic0 = eventEncoder.encode(CASEADDED_EVENT);
//        subscribeEvent(topic0,otherTopics,fromBlock,toBlock,callback);
    }

    public void subscribeCaseAddedEvent(EventSubCallback callback) {
        String topic0 = eventEncoder.encode(CASEADDED_EVENT);
//        subscribeEvent(topic0,callback);
    }

    public TransactionReceipt addCase(String caseId, String icdCode, String ipfsHash,
            String patient) {
        final Function function = new Function(
                FUNC_ADDCASE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(icdCode), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(ipfsHash), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(patient)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodAddCaseRawFunction(String caseId, String icdCode, String ipfsHash,
            String patient) throws ContractException {
        final Function function = new Function(FUNC_ADDCASE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(icdCode), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(ipfsHash), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(patient)), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForAddCase(String caseId, String icdCode, String ipfsHash,
            String patient) {
        final Function function = new Function(
                FUNC_ADDCASE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(icdCode), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(ipfsHash), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(patient)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String addCase(String caseId, String icdCode, String ipfsHash, String patient,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDCASE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(icdCode), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(ipfsHash), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Address(patient)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple4<String, String, String, String> getAddCaseInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDCASE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue()
                );
    }

    public BigInteger getAllCaseCount() throws ContractException {
        final Function function = new Function(FUNC_GETALLCASECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Function getMethodGetAllCaseCountRawFunction() throws ContractException {
        final Function function = new Function(FUNC_GETALLCASECOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return function;
    }

    public Tuple6<List<String>, List<String>, List<String>, List<String>, List<String>, List<BigInteger>> getAllCases(
            ) throws ContractException {
        final Function function = new Function(FUNC_GETALLCASES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<List<String>, List<String>, List<String>, List<String>, List<String>, List<BigInteger>>(
                convertToNative((List<Utf8String>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Utf8String>) results.get(2).getValue()), 
                convertToNative((List<Address>) results.get(3).getValue()), 
                convertToNative((List<Address>) results.get(4).getValue()), 
                convertToNative((List<Uint256>) results.get(5).getValue()));
    }

    public Function getMethodGetAllCasesRawFunction() throws ContractException {
        final Function function = new Function(FUNC_GETALLCASES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return function;
    }

    public List getAllPatients() throws ContractException {
        final Function function = new Function(FUNC_GETALLPATIENTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Function getMethodGetAllPatientsRawFunction() throws ContractException {
        final Function function = new Function(FUNC_GETALLPATIENTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return function;
    }

    public Tuple5<String, String, String, String, BigInteger> getCase(String patient,
            BigInteger index) throws ContractException {
        final Function function = new Function(FUNC_GETCASE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(patient), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple5<String, String, String, String, BigInteger>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (BigInteger) results.get(4).getValue());
    }

    public Function getMethodGetCaseRawFunction(String patient, BigInteger index) throws
            ContractException {
        final Function function = new Function(FUNC_GETCASE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(patient), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return function;
    }

    public BigInteger getCaseCount(String patient) throws ContractException {
        final Function function = new Function(FUNC_GETCASECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(patient)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Function getMethodGetCaseCountRawFunction(String patient) throws ContractException {
        final Function function = new Function(FUNC_GETCASECOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(patient)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return function;
    }

    public List getIpfsHashes(String patient) throws ContractException {
        final Function function = new Function(FUNC_GETIPFSHASHES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(patient)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Function getMethodGetIpfsHashesRawFunction(String patient) throws ContractException {
        final Function function = new Function(FUNC_GETIPFSHASHES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Address(patient)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return function;
    }

    public static CaseContract load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new CaseContract(contractAddress, client, credential);
    }

    public static CaseContract deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(CaseContract.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class CaseAddedEventResponse {
        public TransactionReceipt.Logs log;

        public String patient;

        public String doctor;

        public String caseId;

        public String icdCode;

        public String ipfsHash;

        public BigInteger visitTime;
    }
}
