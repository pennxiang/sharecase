package com;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.v3.client.Client;
import org.fisco.bcos.sdk.v3.codec.datatypes.Address;
import org.fisco.bcos.sdk.v3.codec.datatypes.DynamicArray;
import org.fisco.bcos.sdk.v3.codec.datatypes.Event;
import org.fisco.bcos.sdk.v3.codec.datatypes.Function;
import org.fisco.bcos.sdk.v3.codec.datatypes.Type;
import org.fisco.bcos.sdk.v3.codec.datatypes.TypeReference;
import org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.v3.codec.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.v3.contract.Contract;
import org.fisco.bcos.sdk.v3.crypto.CryptoSuite;
import org.fisco.bcos.sdk.v3.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.v3.eventsub.EventSubCallback;
import org.fisco.bcos.sdk.v3.model.CryptoType;
import org.fisco.bcos.sdk.v3.model.TransactionReceipt;
import org.fisco.bcos.sdk.v3.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.v3.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class CaseContract extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b50610d96806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063223c3bb91461005c57806324619433146100825780633762dcf2146100a5578063762d8bd8146100c5578063f641a661146100da575b600080fd5b61006f61006a3660046109d6565b6100e2565b6040519081526020015b60405180910390f35b610095610090366004610a13565b610109565b6040516100799493929190610ab4565b6100b86100b33660046109d6565b6102bf565b6040516100799190610af6565b6100d86100d3366004610b58565b610441565b005b6100b86105d9565b600080826040516100f39190610be0565b9081526040519081900360200190205492915050565b606080600080600080876040516101209190610be0565b9081526020016040518091039020868154811061013f5761013f610bfc565b906000526020600020906004020160405180608001604052908160008201805461016890610c12565b80601f016020809104026020016040519081016040528092919081815260200182805461019490610c12565b80156101e15780601f106101b6576101008083540402835291602001916101e1565b820191906000526020600020905b8154815290600101906020018083116101c457829003601f168201915b505050505081526020016001820180546101fa90610c12565b80601f016020809104026020016040519081016040528092919081815260200182805461022690610c12565b80156102735780601f1061024857610100808354040283529160200191610273565b820191906000526020600020905b81548152906001019060200180831161025657829003601f168201915b505050918352505060028201546001600160a01b031660208083019190915260039092015460409182015282519183015190830151606090930151919a90995091975095509350505050565b6060600080836040516102d29190610be0565b90815260405190819003602001902054905060008167ffffffffffffffff8111156102ff576102ff610933565b60405190808252806020026020018201604052801561033257816020015b606081526020019060019003908161031d5790505b50905060005b82811015610439576000856040516103509190610be0565b9081526020016040518091039020818154811061036f5761036f610bfc565b9060005260206000209060040201600001805461038b90610c12565b80601f01602080910402602001604051908101604052809291908181526020018280546103b790610c12565b80156104045780601f106103d957610100808354040283529160200191610404565b820191906000526020600020905b8154815290600101906020018083116103e757829003601f168201915b505050505082828151811061041b5761041b610bfc565b6020026020010181905250808061043190610c63565b915050610338565b509392505050565b6002836040516104519190610be0565b9081526040519081900360200190205460ff166104de5760018054808201825560009190915283516104aa917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190602086019061089a565b5060016002846040516104bd9190610be0565b908152604051908190036020019020805491151560ff199092169190911790555b60408051608081018252838152602081018390523381830152426060820152905160009061050d908690610be0565b90815260405160209181900382019020805460018101825560009182529082902083518051859460049094029092019261054c9284929091019061089a565b506020828101518051610565926001850192019061089a565b506040828101516002830180546001600160a01b0319166001600160a01b039092169190911790556060909201516003909101555133907f337b109e3f497728f2bdd27545c9ed1cb52ed4a4103cc94da88b868879c982e2906105cb9087908790610c7e565b60405180910390a250505050565b60606000805b600154811015610643576000600182815481106105fe576105fe610bfc565b906000526020600020016040516106159190610cac565b9081526040519081900360200190205461062f9083610d48565b91508061063b81610c63565b9150506105df565b5060008167ffffffffffffffff81111561065f5761065f610933565b60405190808252806020026020018201604052801561069257816020015b606081526020019060019003908161067d5790505b5090506000805b600154811015610891576000600182815481106106b8576106b8610bfc565b9060005260206000200180546106cd90610c12565b80601f01602080910402602001604051908101604052809291908181526020018280546106f990610c12565b80156107465780601f1061071b57610100808354040283529160200191610746565b820191906000526020600020905b81548152906001019060200180831161072957829003601f168201915b5050505050905060005b6000826040516107609190610be0565b9081526040519081900360200190205481101561087c576000826040516107879190610be0565b908152602001604051809103902081815481106107a6576107a6610bfc565b906000526020600020906004020160000180546107c290610c12565b80601f01602080910402602001604051908101604052809291908181526020018280546107ee90610c12565b801561083b5780601f106108105761010080835404028352916020019161083b565b820191906000526020600020905b81548152906001019060200180831161081e57829003601f168201915b505050505085858061084c90610c63565b96508151811061085e5761085e610bfc565b6020026020010181905250808061087490610c63565b915050610750565b5050808061088990610c63565b915050610699565b50909392505050565b8280546108a690610c12565b90600052602060002090601f0160209004810192826108c8576000855561090e565b82601f106108e157805160ff191683800117855561090e565b8280016001018555821561090e579182015b8281111561090e5782518255916020019190600101906108f3565b5061091a92915061091e565b5090565b5b8082111561091a576000815560010161091f565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261095a57600080fd5b813567ffffffffffffffff8082111561097557610975610933565b604051601f8301601f19908116603f0116810190828211818310171561099d5761099d610933565b816040528381528660208588010111156109b657600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156109e857600080fd5b813567ffffffffffffffff8111156109ff57600080fd5b610a0b84828501610949565b949350505050565b60008060408385031215610a2657600080fd5b823567ffffffffffffffff811115610a3d57600080fd5b610a4985828601610949565b95602094909401359450505050565b60005b83811015610a73578181015183820152602001610a5b565b83811115610a82576000848401525b50505050565b60008151808452610aa0816020860160208601610a58565b601f01601f19169290920160200192915050565b608081526000610ac76080830187610a88565b8281036020840152610ad98187610a88565b6001600160a01b0395909516604084015250506060015292915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b4b57603f19888603018452610b39858351610a88565b94509285019290850190600101610b1d565b5092979650505050505050565b600080600060608486031215610b6d57600080fd5b833567ffffffffffffffff80821115610b8557600080fd5b610b9187838801610949565b94506020860135915080821115610ba757600080fd5b610bb387838801610949565b93506040860135915080821115610bc957600080fd5b50610bd686828701610949565b9150509250925092565b60008251610bf2818460208701610a58565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b600181811c90821680610c2657607f821691505b60208210811415610c4757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610c7757610c77610c4d565b5060010190565b604081526000610c916040830185610a88565b8281036020840152610ca38185610a88565b95945050505050565b600080835481600182811c915080831680610cc857607f831692505b6020808410821415610ce857634e487b7160e01b86526022600452602486fd5b818015610cfc5760018114610d0d57610d3a565b60ff19861689528489019650610d3a565b60008a81526020902060005b86811015610d325781548b820152908501908301610d19565b505084890196505b509498975050505050505050565b60008219821115610d5b57610d5b610c4d565b50019056fea26469706673582212204523a9f4dc40002a1a419dc75c8270040f3d57baa07a2ea2af466013ef36e8cb64736f6c634300080b0033"};

    public static final String BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405234801561001057600080fd5b50610d9a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630767f60b1461005c5780630b32f4ea14610088578063b79b164a1461009d578063cf811908146100b2578063d0a5a5f8146100c5575b600080fd5b61006f61006a3660046109da565b6100e6565b60405161007f9493929190610a7b565b60405180910390f35b61009061029c565b60405161007f9190610abd565b6100b06100ab366004610b1f565b61055d565b005b6100906100c0366004610ba7565b6106f5565b6100d86100d3366004610ba7565b610877565b60405190815260200161007f565b606080600080600080876040516100fd9190610be4565b9081526020016040518091039020868154811061011c5761011c610c00565b906000526020600020906004020160405180608001604052908160008201805461014590610c16565b80601f016020809104026020016040519081016040528092919081815260200182805461017190610c16565b80156101be5780601f10610193576101008083540402835291602001916101be565b820191906000526020600020905b8154815290600101906020018083116101a157829003601f168201915b505050505081526020016001820180546101d790610c16565b80601f016020809104026020016040519081016040528092919081815260200182805461020390610c16565b80156102505780601f1061022557610100808354040283529160200191610250565b820191906000526020600020905b81548152906001019060200180831161023357829003601f168201915b505050918352505060028201546001600160a01b031660208083019190915260039092015460409182015282519183015190830151606090930151919a90995091975095509350505050565b60606000805b600154811015610306576000600182815481106102c1576102c1610c00565b906000526020600020016040516102d89190610c51565b908152604051908190036020019020546102f29083610d03565b9150806102fe81610d1b565b9150506102a2565b5060008167ffffffffffffffff81111561032257610322610937565b60405190808252806020026020018201604052801561035557816020015b60608152602001906001900390816103405790505b5090506000805b6001548110156105545760006001828154811061037b5761037b610c00565b90600052602060002001805461039090610c16565b80601f01602080910402602001604051908101604052809291908181526020018280546103bc90610c16565b80156104095780601f106103de57610100808354040283529160200191610409565b820191906000526020600020905b8154815290600101906020018083116103ec57829003601f168201915b5050505050905060005b6000826040516104239190610be4565b9081526040519081900360200190205481101561053f5760008260405161044a9190610be4565b9081526020016040518091039020818154811061046957610469610c00565b9060005260206000209060040201600001805461048590610c16565b80601f01602080910402602001604051908101604052809291908181526020018280546104b190610c16565b80156104fe5780601f106104d3576101008083540402835291602001916104fe565b820191906000526020600020905b8154815290600101906020018083116104e157829003601f168201915b505050505085858061050f90610d1b565b96508151811061052157610521610c00565b6020026020010181905250808061053790610d1b565b915050610413565b5050808061054c90610d1b565b91505061035c565b50909392505050565b60028360405161056d9190610be4565b9081526040519081900360200190205460ff166105fa5760018054808201825560009190915283516105c6917f801412028db4471413ca17a15806a4f6857ca4e7c2783885b524c92c7efcdc980190602086019061089e565b5060016002846040516105d99190610be4565b908152604051908190036020019020805491151560ff199092169190911790555b604080516080810182528381526020810183905233818301524260608201529051600090610629908690610be4565b9081526040516020918190038201902080546001810182556000918252908290208351805185946004909402909201926106689284929091019061089e565b506020828101518051610681926001850192019061089e565b506040828101516002830180546001600160a01b0319166001600160a01b039092169190911790556060909201516003909101555133907f73990bd45293cd77668343e07b72411773a8d98e3fbad386873dcf44c2e2a113906106e79087908790610d36565b60405180910390a250505050565b6060600080836040516107089190610be4565b90815260405190819003602001902054905060008167ffffffffffffffff81111561073557610735610937565b60405190808252806020026020018201604052801561076857816020015b60608152602001906001900390816107535790505b50905060005b8281101561086f576000856040516107869190610be4565b908152602001604051809103902081815481106107a5576107a5610c00565b906000526020600020906004020160000180546107c190610c16565b80601f01602080910402602001604051908101604052809291908181526020018280546107ed90610c16565b801561083a5780601f1061080f5761010080835404028352916020019161083a565b820191906000526020600020905b81548152906001019060200180831161081d57829003601f168201915b505050505082828151811061085157610851610c00565b6020026020010181905250808061086790610d1b565b91505061076e565b509392505050565b600080826040516108889190610be4565b9081526040519081900360200190205492915050565b8280546108aa90610c16565b90600052602060002090601f0160209004810192826108cc5760008555610912565b82601f106108e557805160ff1916838001178555610912565b82800160010185558215610912579182015b828111156109125782518255916020019190600101906108f7565b5061091e929150610922565b5090565b5b8082111561091e5760008155600101610923565b63b95aa35560e01b600052604160045260246000fd5b600082601f83011261095e57600080fd5b813567ffffffffffffffff8082111561097957610979610937565b604051601f8301601f19908116603f011681019082821181831017156109a1576109a1610937565b816040528381528660208588010111156109ba57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156109ed57600080fd5b823567ffffffffffffffff811115610a0457600080fd5b610a108582860161094d565b95602094909401359450505050565b60005b83811015610a3a578181015183820152602001610a22565b83811115610a49576000848401525b50505050565b60008151808452610a67816020860160208601610a1f565b601f01601f19169290920160200192915050565b608081526000610a8e6080830187610a4f565b8281036020840152610aa08187610a4f565b6001600160a01b0395909516604084015250506060015292915050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610b1257603f19888603018452610b00858351610a4f565b94509285019290850190600101610ae4565b5092979650505050505050565b600080600060608486031215610b3457600080fd5b833567ffffffffffffffff80821115610b4c57600080fd5b610b588783880161094d565b94506020860135915080821115610b6e57600080fd5b610b7a8783880161094d565b93506040860135915080821115610b9057600080fd5b50610b9d8682870161094d565b9150509250925092565b600060208284031215610bb957600080fd5b813567ffffffffffffffff811115610bd057600080fd5b610bdc8482850161094d565b949350505050565b60008251610bf6818460208701610a1f565b9190910192915050565b63b95aa35560e01b600052603260045260246000fd5b600181811c90821680610c2a57607f821691505b60208210811415610c4b5763b95aa35560e01b600052602260045260246000fd5b50919050565b600080835481600182811c915080831680610c6d57607f831692505b6020808410821415610c8d5763b95aa35560e01b86526022600452602486fd5b818015610ca15760018114610cb257610cdf565b60ff19861689528489019650610cdf565b60008a81526020902060005b86811015610cd75781548b820152908501908301610cbe565b505084890196505b509498975050505050505050565b63b95aa35560e01b600052601160045260246000fd5b60008219821115610d1657610d16610ced565b500190565b6000600019821415610d2f57610d2f610ced565b5060010190565b604081526000610d496040830185610a4f565b8281036020840152610d5b8185610a4f565b9594505050505056fea2646970667358221220483e8b761ec0c1628808d87ecaf792e0640a4b368a377f1fb9a60800cf77865564736f6c634300080b0033"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"caseId\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"versionCode\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"editor\",\"type\":\"address\"}],\"name\":\"VersionAdded\",\"type\":\"event\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":3,\"slot\":0,\"value\":[0]},{\"kind\":3,\"slot\":2,\"value\":[0]},{\"kind\":4,\"value\":[1]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"caseId\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"versionCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"}],\"name\":\"addVersion\",\"outputs\":[],\"selector\":[1982696408,3080394314],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":0},{\"kind\":4,\"value\":[1]}],\"inputs\":[],\"name\":\"getAllVersionCodes\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"selector\":[4131497569,187888874],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":0,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"caseId\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionCode\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"ipfsHash\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"editor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"selector\":[610374707,124253707],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":0,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"caseId\",\"type\":\"string\"}],\"name\":\"getVersionCodesByCaseId\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"selector\":[929225970,3481344264],\"stateMutability\":\"view\",\"type\":\"function\"},{\"conflictFields\":[{\"kind\":3,\"slot\":0,\"value\":[0]}],\"inputs\":[{\"internalType\":\"string\",\"name\":\"caseId\",\"type\":\"string\"}],\"name\":\"getVersionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"selector\":[574372793,3500516856],\"stateMutability\":\"view\",\"type\":\"function\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.v3.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_ADDVERSION = "addVersion";

    public static final String FUNC_GETALLVERSIONCODES = "getAllVersionCodes";

    public static final String FUNC_GETVERSION = "getVersion";

    public static final String FUNC_GETVERSIONCODESBYCASEID = "getVersionCodesByCaseId";

    public static final String FUNC_GETVERSIONCOUNT = "getVersionCount";

    public static final Event VERSIONADDED_EVENT = new Event("VersionAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>(true) {}));
    ;

    protected CaseContract(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public static String getABI() {
        return ABI;
    }

    public List<VersionAddedEventResponse> getVersionAddedEvents(
            TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VERSIONADDED_EVENT, transactionReceipt);
        ArrayList<VersionAddedEventResponse> responses = new ArrayList<VersionAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VersionAddedEventResponse typedResponse = new VersionAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.editor = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.caseId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.versionCode = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeVersionAddedEvent(BigInteger fromBlock, BigInteger toBlock,
            List<String> otherTopics, EventSubCallback callback) {
        String topic0 = eventEncoder.encode(VERSIONADDED_EVENT);
//        subscribeEvent(topic0,otherTopics,fromBlock,toBlock,callback);
    }

    public void subscribeVersionAddedEvent(EventSubCallback callback) {
        String topic0 = eventEncoder.encode(VERSIONADDED_EVENT);
//        subscribeEvent(topic0,callback);
    }

    public TransactionReceipt addVersion(String caseId, String versionCode, String ipfsHash) {
        final Function function = new Function(
                FUNC_ADDVERSION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(versionCode), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(ipfsHash)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return executeTransaction(function);
    }

    public Function getMethodAddVersionRawFunction(String caseId, String versionCode,
            String ipfsHash) throws ContractException {
        final Function function = new Function(FUNC_ADDVERSION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(versionCode), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(ipfsHash)), 
                Arrays.<TypeReference<?>>asList());
        return function;
    }

    public String getSignedTransactionForAddVersion(String caseId, String versionCode,
            String ipfsHash) {
        final Function function = new Function(
                FUNC_ADDVERSION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(versionCode), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(ipfsHash)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return createSignedTransaction(function);
    }

    public String addVersion(String caseId, String versionCode, String ipfsHash,
            TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDVERSION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(versionCode), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(ipfsHash)), 
                Collections.<TypeReference<?>>emptyList(), 0);
        return asyncExecuteTransaction(function, callback);
    }

    public Tuple3<String, String, String> getAddVersionInput(
            TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = this.functionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, String, String>(

                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue()
                );
    }

    public List getAllVersionCodes() throws ContractException {
        final Function function = new Function(FUNC_GETALLVERSIONCODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Function getMethodGetAllVersionCodesRawFunction() throws ContractException {
        final Function function = new Function(FUNC_GETALLVERSIONCODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return function;
    }

    public Tuple4<String, String, String, BigInteger> getVersion(String caseId, BigInteger index)
            throws ContractException {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<String, String, String, BigInteger>(
                (String) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue());
    }

    public Function getMethodGetVersionRawFunction(String caseId, BigInteger index) throws
            ContractException {
        final Function function = new Function(FUNC_GETVERSION, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId), 
                new org.fisco.bcos.sdk.v3.codec.datatypes.generated.Uint256(index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return function;
    }

    public List getVersionCodesByCaseId(String caseId) throws ContractException {
        final Function function = new Function(FUNC_GETVERSIONCODESBYCASEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public Function getMethodGetVersionCodesByCaseIdRawFunction(String caseId) throws
            ContractException {
        final Function function = new Function(FUNC_GETVERSIONCODESBYCASEID, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return function;
    }

    public BigInteger getVersionCount(String caseId) throws ContractException {
        final Function function = new Function(FUNC_GETVERSIONCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Function getMethodGetVersionCountRawFunction(String caseId) throws ContractException {
        final Function function = new Function(FUNC_GETVERSIONCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.v3.codec.datatypes.Utf8String(caseId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return function;
    }

    public static CaseContract load(String contractAddress, Client client,
            CryptoKeyPair credential) {
        return new CaseContract(contractAddress, client, credential);
    }

    public static CaseContract deploy(Client client, CryptoKeyPair credential) throws
            ContractException {
        return deploy(CaseContract.class, client, credential, getBinary(client.getCryptoSuite()), getABI(), null, null);
    }

    public static class VersionAddedEventResponse {
        public TransactionReceipt.Logs log;

        public String editor;

        public String caseId;

        public String versionCode;
    }
}
